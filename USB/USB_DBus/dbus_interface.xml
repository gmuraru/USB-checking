<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE node PUBLIC
  "-//freedesktop//DTD D-Bus Object Introspection 1.0//EN"
  "https://specifications.freedesktop.org/dbus/1.0/introspect.dtd">
<node>
  <!--
   org.usbguard.Policy:
   The Policy interface allows to modify the USB-Check authorization policy.
  -->
  <interface name="org.usb-check.Policy">
    <!--
      listAllow:
       @allowedDevices: An array of rule tuples. 
        List the currently allowed type of devices to connect.
        List the bDeviceClasses that are allowed.
     -->
    <method name="listAllow">
      <arg name="allowedDevices" direction="out" type="au"/>
    </method>


    <!--
      appendDeviceClass:
       @class: The bDeviceClass that would be allowed.
       @res: true - appended succesfully
             false - was already on the list
        Append a new type of device to be allowed.
     -->
    <method name="appendDeviceClass">
      <arg name="class" direction="in" type="s"/>
      <arg name="res" direction="out" type="b"/>
    </method>


    <!--
        appendManualID:
        @id: The device id
        Permit the user to manually add a device to the permission list
    -->
    <method name="appendManualID">
        <arg name="id" direction="in" type="u"/>
    </method>


    <!--
      removeRule:
       @id: The rule id of the rule to be removed.
        @res: true - appended succesfully
             false - was already on the list
      Remove a type of device from the allowed list.
     -->
    <method name="removeDeviceClass">
      <arg name="id" direction="in" type="u"/>
      <arg name="res" direction="out" type="b"/>
    </method>
  </interface>


  <!--
    org.usb-check.Devices:
    The org.usb-check.Devices interface provides access to USB
    devices via the USBBlocker daemon. It can be used to modify
    the runtime authorization state of devices and to listen
    for device events (insertion, removal, (de)authorization,
    ...)
   -->
  <interface name="org.usb-check.Devices">
    <!--
      listDevices:
       @query: A query, in the rule language syntax, for matching devices.
       @devices: An array of (device_id, device_type) tuples that match the query.
      List devices that match the specified query. The query uses the rule
      language syntax and the devices are returned as device specific rules.
      The target in each rule represents the current authorization state of
      the device. Order of the returned devices is not defined and should not
      be relied upon.
      Example queries:
       - 'allow': Matches only authorized devices.
       - 'block': Matches only blocked devices.
      -->
    <method name="listDevices">
      <arg name="query" direction="in" type="s"/>
      <arg name="devices" direction="out" type="a(uu)"/>
    </method>


    <!--
      allowDevice:
       @id: Device id of the device to authorize.
       @bus_id: The bus id of the device to be authorized.
       @permanent: A boolean flag specifying whether an allow rule should be appended to the policy.
      Authorize a device to interact with the system.
      If the permanent flag is set to True, the device id would be written to a list for allowed devices
      Sucessfull exection of this method will cause the DeviceAllowed signal to be broadcasted.
      -->
    <method name="allowDevice">
      <arg name="id" direction="in" type="u"/>
      <arg name="bus_id" direction="in" type="u"/>
      <arg name="permanent" direction="in" type="b"/>
    </method>


    <!--
      blockDevice:
       @id: Device id of the device to deauthorize.
       @permanent: A boolean flag specifying whether a block rule should be appended to the policy.
      Deauthorize a device.
      If the permanent flag is set to True, the device with that id would never be allowed in the future.
      Sucessfull exection of this method will cause the DeviceBlocked signal to be broadcasted.
      -->
    <method name="blockDevice">
      <arg name="id" direction="in" type="u"/>
      <arg name="permanent" direction="in" type="b"/>
    </method>


    <!--
      DeviceInserted:
       @id: Device id of the device
       @bus_id: The bus id of the device that was inserted
       @interfaces: Specify the type of interfaces for the device
      Notify that a USB device was inserted into the system. When a newly inserted
      device is recognized by the USB-Check daemon, it will try to check if is an
      allowed or blocked device. If a match is found, the authorization target from the
      matched rule is applied on the device. Otherwise a message would be sent to the
      user regarding a new connected device.
        Also if the device is allowed/rejected it would be send different signals
      -->
    <signal name="DeviceInserted">
      <arg name="id" direction="out" type="u"/>
      <arg name="bus_id" direction="out" type="u"/>
      <arg name="interfaces" direction="out" type="as"/>
    </signal>

    <!--
      DeviceRemoved:
       @id: Device id of the device
       @bus_id: The bus id of the device that was inserted
       @interfaces: The interfaces of the device
      Notify that a USB device was removed from the system.
      -->
    <signal name="DeviceRemoved">
      <arg name="id" direction="out" type="u"/>
      <arg name="bus_id" direction="out" type="u"/>
      <arg name="interfaces" direction="out" type="as"/>
    </signal>

    <!--
      DeviceAllowed:
       @id: Device id of the device
       @devClass_match: The rule that let the device to be allowed
       @manualAllowed: true if the device was added by the user to the trusted
                        device list
      Notify that a USB device was allowed to interact with the system:
      was alloed manually by the user or by being into a specific class.
     -->
    <signal name="DeviceAllowed">
      <arg name="id" direction="out" type="u"/>
      <arg name="rule_id" direction="out" type="u"/>
      <arg name="manualAllowed" direction="out" type="b"/>
    </signal>

    <!--
      DeviceBlocked:
       @id: Device id of the device
       @bus_id: The bus id where the device was connected
       @interfaces: The device interfaces
      Notify that a USB device was blocked from interacting with the system. 
     -->
    <signal name="DeviceBlocked">
      <arg name="id" direction="out" type="u"/>
      <arg name="bus_id" direction="out" type="u"/>
      <arg name="interfaces" direction="out" type="as"/>
    </signal>

  </interface>
</node>
